/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the tools applications of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:GPL-EXCEPT$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU General Public License Usage
** Alternatively, this file may be used under the terms of the GNU
** General Public License version 3 as published by the Free Software
** Foundation with exceptions as appearing in the file LICENSE.GPL3-EXCEPT
** included in the packaging of this file. Please review the following
** information to ensure the GNU General Public License requirements will
** be met: https://www.gnu.org/licenses/gpl-3.0.html.
**
** $QT_END_LICENSE$
**
****************************************************************************/

// auto generated
// DO NOT EDIT.

static const short pp_keyword_trans[][128] = {
    {0,0,0,0,0,0,0,0,0,98,12,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     98,76,96,13,1,60,62,97,9,10,58,56,11,57,102,59,
     6,6,6,6,6,6,6,6,6,6,92,0,7,81,8,91,
     0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
     1,1,1,1,1,1,1,1,1,1,1,0,101,0,61,1,
     0,1,2,3,4,1,1,1,1,1,1,1,1,1,5,1,
     1,1,1,1,1,1,1,1,1,1,1,0,68,0,71,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,79,87,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,88,80,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,93,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,14,34,0,0,0,20,0,0,0,0,0,0,
     0,0,0,0,0,22,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,21,0,0,0,0,0,0,0,44,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,27,0,0,0,0,0,0,0,0,0,30,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,35,0,40,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,36,0,0,0,0,0,0,
     0,0,0,38,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,100,0,0,0,0,99,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,65,0,0,0,0,0,0,0,0,0,0,0,0,0,69,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0},
    {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     103,103,103,103,103,103,103,103,103,103,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0}
};

static const struct
{
   PP_Token token;
   short next;
   char defchar;
   short defnext;
   PP_Token ident;
} pp_keywords[] = {
    {PP_NOTOKEN, 0, 0, 0, PP_NOTOKEN},
    {PP_CHARACTER, 0, 0, 0, PP_NOTOKEN},
    {PP_CHARACTER, 0, 105, 63, PP_NOTOKEN},
    {PP_CHARACTER, 0, 111, 72, PP_NOTOKEN},
    {PP_CHARACTER, 0, 101, 50, PP_NOTOKEN},
    {PP_CHARACTER, 0, 111, 77, PP_NOTOKEN},
    {PP_DIGIT, 0, 0, 0, PP_NOTOKEN},
    {PP_LANGLE, 1, 0, 0, PP_NOTOKEN},
    {PP_RANGLE, 2, 0, 0, PP_NOTOKEN},
    {PP_LPAREN, 0, 0, 0, PP_NOTOKEN},
    {PP_RPAREN, 0, 0, 0, PP_NOTOKEN},
    {PP_COMMA, 0, 0, 0, PP_NOTOKEN},
    {PP_NEWLINE, 0, 0, 0, PP_NOTOKEN},
    {PP_HASH, 3, 0, 0, PP_HASH},
    {PP_HASH, 0, 101, 15, PP_HASH},
    {PP_HASH, 0, 102, 16, PP_HASH},
    {PP_HASH, 0, 105, 17, PP_HASH},
    {PP_HASH, 0, 110, 18, PP_HASH},
    {PP_HASH, 0, 101, 19, PP_HASH},
    {PP_DEFINE, 0, 0, 0, PP_HASH},
    {PP_HASH, 4, 0, 0, PP_HASH},
    {PP_IF, 5, 0, 0, PP_HASH},
    {PP_HASH, 0, 110, 23, PP_HASH},
    {PP_HASH, 0, 100, 24, PP_HASH},
    {PP_HASH, 0, 101, 25, PP_HASH},
    {PP_HASH, 0, 102, 26, PP_HASH},
    {PP_UNDEF, 0, 0, 0, PP_HASH},
    {PP_HASH, 0, 101, 28, PP_HASH},
    {PP_HASH, 0, 102, 29, PP_HASH},
    {PP_IFDEF, 0, 0, 0, PP_HASH},
    {PP_HASH, 0, 100, 31, PP_HASH},
    {PP_HASH, 0, 101, 32, PP_HASH},
    {PP_HASH, 0, 102, 33, PP_HASH},
    {PP_IFNDEF, 0, 0, 0, PP_HASH},
    {PP_HASH, 6, 0, 0, PP_HASH},
    {PP_HASH, 7, 0, 0, PP_HASH},
    {PP_HASH, 0, 102, 37, PP_HASH},
    {PP_ELIF, 0, 0, 0, PP_HASH},
    {PP_HASH, 0, 101, 39, PP_HASH},
    {PP_ELSE, 0, 0, 0, PP_HASH},
    {PP_HASH, 0, 100, 41, PP_HASH},
    {PP_HASH, 0, 105, 42, PP_HASH},
    {PP_HASH, 0, 102, 43, PP_HASH},
    {PP_ENDIF, 0, 0, 0, PP_HASH},
    {PP_HASH, 0, 99, 45, PP_HASH},
    {PP_HASH, 0, 108, 46, PP_HASH},
    {PP_HASH, 0, 117, 47, PP_HASH},
    {PP_HASH, 0, 100, 48, PP_HASH},
    {PP_HASH, 0, 101, 49, PP_HASH},
    {PP_INCLUDE, 0, 0, 0, PP_HASH},
    {PP_CHARACTER, 0, 102, 51, PP_CHARACTER},
    {PP_CHARACTER, 0, 105, 52, PP_CHARACTER},
    {PP_CHARACTER, 0, 110, 53, PP_CHARACTER},
    {PP_CHARACTER, 0, 101, 54, PP_CHARACTER},
    {PP_CHARACTER, 0, 100, 55, PP_CHARACTER},
    {PP_DEFINED, 0, 0, 0, PP_CHARACTER},
    {PP_PLUS, 0, 0, 0, PP_NOTOKEN},
    {PP_MINUS, 0, 0, 0, PP_NOTOKEN},
    {PP_STAR, 0, 0, 0, PP_NOTOKEN},
    {PP_SLASH, 8, 0, 0, PP_NOTOKEN},
    {PP_PERCENT, 0, 58, 94, PP_NOTOKEN},
    {PP_HAT, 0, 0, 0, PP_NOTOKEN},
    {PP_AND, 0, 38, 89, PP_NOTOKEN},
    {PP_CHARACTER, 0, 116, 64, PP_CHARACTER},
    {PP_CHARACTER, 9, 0, 0, PP_CHARACTER},
    {PP_CHARACTER, 0, 110, 66, PP_CHARACTER},
    {PP_CHARACTER, 0, 100, 67, PP_CHARACTER},
    {PP_AND, 0, 0, 0, PP_CHARACTER},
    {PP_OR, 0, 124, 90, PP_NOTOKEN},
    {PP_CHARACTER, 0, 114, 70, PP_CHARACTER},
    {PP_OR, 0, 0, 0, PP_CHARACTER},
    {PP_TILDE, 0, 0, 0, PP_NOTOKEN},
    {PP_CHARACTER, 0, 109, 73, PP_CHARACTER},
    {PP_CHARACTER, 0, 112, 74, PP_CHARACTER},
    {PP_CHARACTER, 0, 108, 75, PP_CHARACTER},
    {PP_TILDE, 0, 0, 0, PP_CHARACTER},
    {PP_NOT, 0, 61, 83, PP_NOTOKEN},
    {PP_CHARACTER, 0, 116, 78, PP_CHARACTER},
    {PP_NOT, 0, 95, 84, PP_CHARACTER},
    {PP_LTLT, 0, 0, 0, PP_NOTOKEN},
    {PP_GTGT, 0, 0, 0, PP_NOTOKEN},
    {PP_INCOMPLETE, 0, 61, 82, PP_NOTOKEN},
    {PP_EQEQ, 0, 0, 0, PP_NOTOKEN},
    {PP_NE, 0, 0, 0, PP_NOTOKEN},
    {PP_CHARACTER, 0, 101, 85, PP_CHARACTER},
    {PP_CHARACTER, 0, 113, 86, PP_CHARACTER},
    {PP_NE, 0, 0, 0, PP_CHARACTER},
    {PP_LE, 0, 0, 0, PP_NOTOKEN},
    {PP_GE, 0, 0, 0, PP_NOTOKEN},
    {PP_ANDAND, 0, 0, 0, PP_NOTOKEN},
    {PP_OROR, 0, 0, 0, PP_NOTOKEN},
    {PP_QUESTION, 0, 0, 0, PP_NOTOKEN},
    {PP_COLON, 0, 0, 0, PP_NOTOKEN},
    {PP_HASHHASH, 0, 0, 0, PP_NOTOKEN},
    {PP_INCOMPLETE, 0, 37, 95, PP_NOTOKEN},
    {PP_INCOMPLETE, 0, 58, 93, PP_NOTOKEN},
    {PP_QUOTE, 0, 0, 0, PP_NOTOKEN},
    {PP_SINGLEQUOTE, 0, 0, 0, PP_NOTOKEN},
    {PP_WHITESPACE, 0, 0, 0, PP_NOTOKEN},
    {PP_CPP_COMMENT, 0, 0, 0, PP_NOTOKEN},
    {PP_C_COMMENT, 0, 0, 0, PP_NOTOKEN},
    {PP_BACKSLASH, 0, 0, 0, PP_NOTOKEN},
    {PP_INCOMPLETE, 10, 0, 0, PP_NOTOKEN},
    {PP_FLOATING_LITERAL, 0, 0, 0, PP_NOTOKEN}
};
