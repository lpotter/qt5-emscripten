/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example painting/deform
    \title Vector Deformation
    \ingroup examples-painting
    \brief Demonstrates how to manipulate the elements of a QPainterPath.

    \brief This example shows how to use advanced vector techniques to draw text
    using a \c QPainterPath.

    \image deform-demo.png

    We define a vector deformation field in the shape of a lens and apply
    this to all points in a path. This means that what is rendered on
    screen is not pixel manipulation, but modified vector representations of
    the glyphs themselves. This is visible from the high quality of the
    antialiased edges for the deformed glyphs.

    To get a fairly complex path we allow the user to type in text and
    convert the text to paths. This is done using the
    QPainterPath::addText() function.

    The lens is drawn using a single call to QPainter::drawEllipse(),
    using a QRadialGradient to fill it with a specialized color
    table, giving the effect of the sun's reflection and a drop
    shadow. The lens is cached as a pixmap for better performance.
*/
