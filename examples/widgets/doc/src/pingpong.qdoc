/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example statemachine/pingpong
    \title Ping Pong States Example

    \brief The Ping Pong States example shows how to use parallel states together
    with custom events and transitions in \l{The State Machine Framework}.

    This example implements a statechart where two states communicate by
    posting events to the state machine. The state chart looks as follows:

    \image pingpong-example.png
    \omit
    \caption This is a caption
    \endomit

    The \c pinger and \c ponger states are parallel states, i.e. they are
    entered simultaneously and will take transitions independently of
    eachother.

    The \c pinger state will post the first \c ping event upon entry; the \c
    ponger state will respond by posting a \c pong event; this will cause the
    \c pinger state to post a new \c ping event; and so on.

    \snippet statemachine/pingpong/main.cpp 0

    Two custom events are defined, \c PingEvent and \c PongEvent.

    \snippet statemachine/pingpong/main.cpp 1

    The \c Pinger class defines a state that posts a \c PingEvent to the state
    machine when the state is entered.

    \snippet statemachine/pingpong/main.cpp 2

    The \c PingTransition class defines a transition that is triggered by
    events of type \c PingEvent, and that posts a \c PongEvent (with a delay
    of 500 milliseconds) to the state machine when the transition is
    triggered.

    \snippet statemachine/pingpong/main.cpp 3

    The \c PongTransition class defines a transition that is triggered by
    events of type \c PongEvent, and that posts a \c PingEvent (with a delay
    of 500 milliseconds) to the state machine when the transition is
    triggered.

    \snippet statemachine/pingpong/main.cpp 4

    The main() function begins by creating a state machine and a parallel
    state group.

    \snippet statemachine/pingpong/main.cpp 5

    Next, the \c pinger and \c ponger states are created, with the parallel
    state group as their parent state. Note that the transitions are \e
    targetless. When such a transition is triggered, the source state won't be
    exited and re-entered; only the transition's onTransition() function will
    be called, and the state machine's configuration will remain the same,
    which is precisely what we want in this case.

    \snippet statemachine/pingpong/main.cpp 6

    Finally, the group is added to the state machine, the machine is started,
    and the application event loop is entered.

  */
