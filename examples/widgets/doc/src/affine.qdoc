/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example painting/affine
    \title Affine Transformations
    \ingroup examples-painting
    \brief Demonstrates how affine transformations in QPainter works.

    \brief In this example we show Qt's ability to perform affine transformations
    on painting operations.

    \image affine-demo.png

    Transformations can be performed on any kind of graphics drawn using QPainter.
    The transformations used to display the vector graphics, images, and text can be adjusted
    in the following ways:

    \list
    \li Dragging the red circle in the centre of each drawing moves it to a new position.
    \li Dragging the displaced red circle causes the current drawing to be rotated about the
       central circle. Rotation can also be controlled with the \uicontrol Rotate slider.
    \li Scaling is controlled with the \uicontrol Scale slider.
    \li Each drawing can be sheared with the \uicontrol Shear slider.
    \endlist
*/
