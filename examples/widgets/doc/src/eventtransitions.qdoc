/****************************************************************************
**
** Copyright (C) 2016 The Qt Company Ltd.
** Contact: https://www.qt.io/licensing/
**
** This file is part of the documentation of the Qt Toolkit.
**
** $QT_BEGIN_LICENSE:FDL$
** Commercial License Usage
** Licensees holding valid commercial Qt licenses may use this file in
** accordance with the commercial license agreement provided with the
** Software or, alternatively, in accordance with the terms contained in
** a written agreement between you and The Qt Company. For licensing terms
** and conditions see https://www.qt.io/terms-conditions. For further
** information use the contact form at https://www.qt.io/contact-us.
**
** GNU Free Documentation License Usage
** Alternatively, this file may be used under the terms of the GNU Free
** Documentation License version 1.3 as published by the Free Software
** Foundation and appearing in the file included in the packaging of
** this file. Please review the following information to ensure
** the GNU Free Documentation License version 1.3 requirements
** will be met: https://www.gnu.org/licenses/fdl-1.3.html.
** $QT_END_LICENSE$
**
****************************************************************************/

/*!
    \example statemachine/eventtransitions
    \title Event Transitions Example

    \brief The Event Transitions example shows how to use event transitions,
    a feature of \l{The State Machine Framework}.

    The Event Transitions Example illustrates how states change when a
    user enters or leaves the area of a button. The states are handled by
    a QStateMachine object. The screen consists of a QVBoxLayout with a
    central button.

    When the mouse is outside the button, the text in the button displays
    "Outside". When the mouse enters the button, it displays "Inside".

    \borderedimage transitions.png

    \snippet statemachine/eventtransitions/main.cpp 0

    The \c Window class's constructors begins by creating a button.
    This button is added to  \c layout, which is a QVBoxLayout object.
    Then two states are created: \c s1 is the state
    "Outside", and \c s2 is the state "Inside".

    \snippet statemachine/eventtransitions/main.cpp 1

    State \c s1 is the state "Outside" and state \c s2 is state "Inside".

    \snippet statemachine/eventtransitions/main.cpp 2

    When the button receives an event of type QEvent::Enter and the state
    machine is in state \c s1, the machine will transition to state \c s2.

    \snippet statemachine/eventtransitions/main.cpp 3

    When the button receives an event of type QEvent::Leave and the state
    machine is in state \c s2, the machine will transition back to state \c
    s1.

    \snippet statemachine/eventtransitions/main.cpp 4

    Next, state \c s3 is created. \c s3 will be entered when the button
    receives an event of type QEvent::MouseButtonPress and the state machine
    is in state \c s2. When the button receives an event of type
    QEvent::MouseButtonRelease and the state machine is in state \c s3, the
    machine will revert to state \c s2.

    \snippet statemachine/eventtransitions/main.cpp 5

    Finally, the states are added to the machine as top-level states, the
    initial state is set to be \c s1 ("Outside"), and the machine is started.

    \snippet statemachine/eventtransitions/main.cpp 6

    The main() function constructs a Window object that displays the QVBoxLayout
    object \c layout with its \c button.

*/
